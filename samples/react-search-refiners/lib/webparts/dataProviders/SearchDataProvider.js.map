{"version":3,"sources":["webparts/dataProviders/SearchDataProvider.ts"],"names":[],"mappings":"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","file":"webparts/dataProviders/SearchDataProvider.js","sourcesContent":["import ISearchDataProvider from \"./ISearchDataProvider\";\r\nimport { ISearchResults, ISearchResult, IRefinementResult, IRefinementValue, IRefinementFilter } from \"../models/ISearchResult\";\r\nimport pnp, { ConsoleListener, Logger, LogLevel, SearchQuery, SearchQueryBuilder, SearchResults, setup, Web, Sort, SortDirection } from \"sp-pnp-js\";\r\nimport { IWebPartContext } from \"@microsoft/sp-webpart-base\";\r\nimport { Text, JsonUtilities, UrlUtilities } from \"@microsoft/sp-core-library\";\r\nimport sortBy from \"lodash-es/sortBy\";\r\nimport groupBy from 'lodash-es/groupBy';\r\nimport mapValues from 'lodash-es/mapValues';\r\nimport mapKeys from \"lodash-es/mapKeys\";\r\nimport * as moment from \"moment\";\r\nimport { SPRest } from \"sp-pnp-js/lib/sharepoint/rest\";\r\n\r\nclass SearchDataProvider implements ISearchDataProvider {\r\n\r\n    private _initialSearchResult: SearchResults = null;\r\n    private _resultsCount: number;\r\n    private _context: IWebPartContext;\r\n    private _appSearchSettings: SearchQuery;\r\n    private _selectedProperties: string[];\r\n    private _queryTemplate: string;\r\n    private _resultSourceId: string;\r\n    private _enableQueryRules: boolean;\r\n\r\n    public get resultsCount(): number { return this._resultsCount; }\r\n    public set resultsCount(value: number) { this._resultsCount = value; }\r\n\r\n    public set selectedProperties(value: string[]) { this._selectedProperties = value; }\r\n    public get selectedProperties(): string[] { return this._selectedProperties; }\r\n\r\n    public set queryTemplate(value: string) { this._queryTemplate = value; }\r\n    public get queryTemplate(): string { return this._queryTemplate; }\r\n\r\n    public set resultSourceId(value: string) { this._resultSourceId = value; }\r\n    public get resultSourceId(): string { return this._resultSourceId; }\r\n\r\n    public set enableQueryRules(value: boolean) { this._enableQueryRules = value; }\r\n    public get enableQueryRules(): boolean { return this._enableQueryRules; }\r\n\r\n    private _localPnPSetup: SPRest;\r\n\r\n    public constructor(webPartContext: IWebPartContext) {\r\n        this._context = webPartContext;\r\n\r\n        // Setup the PnP JS instance\r\n        const consoleListener = new ConsoleListener();\r\n        Logger.subscribe(consoleListener);\r\n\r\n        // To limit the payload size, we set odata=nometadata\r\n        // We just need to get list items here\r\n        // We use a local configuration to avoid conflicts with other Web Parts\r\n        this._localPnPSetup= pnp.sp.configure({\r\n            headers: {\r\n                Accept: \"application/json; odata=nometadata\",\r\n            },\r\n        }, this._context.pageContext.web.absoluteUrl);\r\n    }\r\n\r\n    /**\r\n     * Performs a search query against SharePoint\r\n     * @param query The search query in KQL format\r\n     * @return The search results\r\n     */\r\n    public async search(query: string, refiners?: string, refinementFilters?: IRefinementFilter[], pageNumber?: number): Promise<ISearchResults> {\r\n\r\n        let searchQuery: SearchQuery = {};\r\n        let sortedRefiners: string[] = [];\r\n\r\n        // Search paging option is one based\r\n        let page = pageNumber ? pageNumber : 1;\r\n\r\n        searchQuery.ClientType = \"ContentSearchRegular\";\r\n        searchQuery.Querytext = query;\r\n\r\n        // Disable query rules by default if not specified\r\n        searchQuery.EnableQueryRules = this._enableQueryRules ? this._enableQueryRules : false;\r\n\r\n        if (this._resultSourceId) {\r\n            searchQuery.SourceId = this._resultSourceId;\r\n        } else {\r\n            // To be able to use search query variable according to the current context\r\n            // http://www.techmikael.com/2015/07/sharepoint-rest-do-support-query.html\r\n            searchQuery.QueryTemplate = this._queryTemplate;\r\n        }\r\n\r\n        searchQuery.RowLimit = this._resultsCount ? this._resultsCount : 50;\r\n        searchQuery.SelectProperties = this._selectedProperties;\r\n        searchQuery.TrimDuplicates = false;\r\n\r\n        let sortList: Sort[] = [\r\n            {\r\n                Property: \"Created\",\r\n                Direction: SortDirection.Descending\r\n            },\r\n            {\r\n                Property: \"Size\",\r\n                Direction: SortDirection.Ascending\r\n            }\r\n        ];\r\n\r\n        searchQuery.SortList = sortList;\r\n\r\n        if (refiners) {\r\n            // Get the refiners order specified in the property pane\r\n            sortedRefiners = refiners.split(\",\");\r\n            searchQuery.Refiners = refiners ? refiners : \"\";\r\n        }\r\n\r\n        if (refinementFilters) {\r\n            if (refinementFilters.length > 0) {\r\n                searchQuery.RefinementFilters = [this._buildRefinementQueryString(refinementFilters)];\r\n            }\r\n        }\r\n\r\n        let results: ISearchResults = {\r\n            RelevantResults: [],\r\n            RefinementResults: [],\r\n            TotalRows: 0,\r\n        };\r\n\r\n        try {\r\n            if (!this._initialSearchResult || page == 1) {\r\n                this._initialSearchResult = await this._localPnPSetup.search(searchQuery);\r\n            }\r\n\r\n            const allItemsPromises: Promise<any>[] = [];\r\n            let refinementResults: IRefinementResult[] = [];\r\n\r\n            // Need to do this check\r\n            // More info here: https://github.com/SharePoint/PnP-JS-Core/issues/337\r\n            if (this._initialSearchResult.RawSearchResults.PrimaryQueryResult) {\r\n\r\n                // Be careful, there was an issue with paging calculation under 2.0.8 version of sp-pnp-js library\r\n                // More info https://github.com/SharePoint/PnP-JS-Core/issues/535\r\n                let r2 = this._initialSearchResult;\r\n                if (page > 1) {\r\n                    r2 = await this._initialSearchResult.getPage(page, this._resultsCount);\r\n                }\r\n\r\n                const resultRows = r2.RawSearchResults.PrimaryQueryResult.RelevantResults.Table.Rows;\r\n                let refinementResultsRows = r2.RawSearchResults.PrimaryQueryResult.RefinementResults;\r\n\r\n                const refinementRows = refinementResultsRows ? refinementResultsRows[\"Refiners\"] : [];\r\n\r\n                // Map search results\r\n                resultRows.map((elt) => {\r\n\r\n                    const p1 = new Promise<ISearchResult>((resolvep1, rejectp1) => {\r\n\r\n                        // Build item result dynamically\r\n                        // We can't type the response here because search results are by definition too heterogeneous so we treat them as key-value object\r\n                        let result: ISearchResult = {};\r\n\r\n                        elt.Cells.map((item) => {\r\n                            result[item.Key] = item.Value;\r\n                        });\r\n\r\n                        // Get the icon source URL\r\n                        this._mapToIcon(result.Filename ? result.Filename : Text.format(\".{0}\", result.FileExtension)).then((iconUrl) => {\r\n\r\n                            result.iconSrc = iconUrl;\r\n                            resolvep1(result);\r\n\r\n                        }).catch((error) => {\r\n                            rejectp1(error);\r\n                        });\r\n                    });\r\n\r\n                    allItemsPromises.push(p1);\r\n                });\r\n\r\n                // Map refinement results                    \r\n                refinementRows.map((refiner) => {\r\n\r\n                    let values: IRefinementValue[] = [];\r\n                    refiner.Entries.map((item) => {\r\n                        values.push({\r\n                            RefinementCount: parseInt(item.RefinementCount, 10),\r\n                            RefinementName: this._formatDate(item.RefinementName), // This value will appear in the selected filter bar\r\n                            RefinementToken: item.RefinementToken,\r\n                            RefinementValue: this._formatDate(item.RefinementValue), // This value will appear in the filter panel\r\n                        });\r\n                    });\r\n\r\n                    refinementResults.push({\r\n                        FilterName: refiner.Name,\r\n                        Values: values,\r\n                    });\r\n                });\r\n\r\n                // Resolve all the promises once to get news\r\n                const relevantResults: ISearchResult[] = await Promise.all(allItemsPromises);\r\n\r\n                // Sort refiners according to the property pane value\r\n                refinementResults = sortBy(refinementResults, (refinement) => {\r\n\r\n                    // Get the index of the corresponding filter name\r\n                    return sortedRefiners.indexOf(refinement.FilterName);\r\n                });\r\n\r\n                results.RelevantResults = relevantResults;\r\n                results.RefinementResults = refinementResults;\r\n                results.TotalRows = this._initialSearchResult.TotalRows;\r\n            }\r\n            return results;\r\n\r\n        } catch (error) {\r\n            Logger.write(\"[SharePointDataProvider.search()]: Error: \" + error, LogLevel.Error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the icon corresponding to the file name extension\r\n     * @param filename The file name (ex: file.pdf)\r\n     */\r\n    private async _mapToIcon(filename: string): Promise<string> {\r\n\r\n        const webAbsoluteUrl = this._context.pageContext.web.absoluteUrl;\r\n        const web = new Web(webAbsoluteUrl);\r\n\r\n        try {\r\n            const encodedFileName = filename ? filename.replace(/[\"']/g, \"\") : \"\";\r\n            const iconFileName = await web.mapToIcon(encodedFileName, 1);\r\n            const iconUrl = webAbsoluteUrl + \"/_layouts/15/images/\" + iconFileName;\r\n\r\n            return iconUrl;\r\n\r\n        } catch (error) {\r\n            Logger.write(\"[SharePointDataProvider._mapToIcon()]: Error: \" + error, LogLevel.Error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find and eeplace ISO 8601 dates in the string by a friendly value\r\n     * @param inputValue The string to format\r\n     */\r\n    private _formatDate(inputValue: string): string {\r\n\r\n        const iso8061rgx = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/g;\r\n        const matches = inputValue.match(iso8061rgx);\r\n\r\n        let updatedInputValue = inputValue;\r\n\r\n        if (matches) {\r\n            matches.map(match => {\r\n                updatedInputValue = updatedInputValue.replace(match, moment(match).format(\"LL\"));\r\n            });\r\n        }\r\n\r\n        return updatedInputValue;\r\n    }\r\n\r\n    /**\r\n     * Build the refinement condition in FQL format\r\n     * @param selectedFilters The selected filter array\r\n     */\r\n    private _buildRefinementQueryString(selectedFilters: IRefinementFilter[]): string {\r\n\r\n        let refinementQueryConditions: string[] = [];\r\n        let refinementQueryString: string = null;\r\n\r\n        const refinementFilters = mapValues(groupBy(selectedFilters, 'FilterName'), (values) => {\r\n            const refinementFilter = values.map((filter) => {\r\n                return filter.Value.RefinementToken;\r\n            });\r\n\r\n            return refinementFilter.length > 1 ? Text.format(\"or({0})\", refinementFilter) : refinementFilter.toString();\r\n        });\r\n\r\n        mapKeys(refinementFilters, (value, key) => {\r\n            refinementQueryConditions.push(key + \":\" + value);\r\n        });\r\n\r\n        const conditionsCount = refinementQueryConditions.length;\r\n\r\n        switch (true) {\r\n\r\n            // No filters\r\n            case (conditionsCount === 0): {\r\n                refinementQueryString = null;\r\n                break;\r\n            }\r\n\r\n            // Just one filter\r\n            case (conditionsCount === 1): {\r\n                refinementQueryString = refinementQueryConditions[0].toString();\r\n                break;\r\n            }\r\n\r\n            // Multiple filters\r\n            case (conditionsCount > 1): {\r\n                refinementQueryString = Text.format(\"and({0})\", refinementQueryConditions.toString());\r\n                break;\r\n            }\r\n        }\r\n\r\n        return refinementQueryString;\r\n    }\r\n}\r\n\r\nexport default SearchDataProvider;"],"sourceRoot":"..\\..\\..\\src"}