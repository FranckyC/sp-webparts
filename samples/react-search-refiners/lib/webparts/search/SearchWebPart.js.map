{"version":3,"sources":["webparts/search/SearchWebPart.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,oCAAsC;AACtC,8DAAqD;AACrD,8DAMoC;AACpC,8DAA0E;AAC1E,8CAAgD;AAChD,gFAA2E;AAI3E,kFAA6E;AAC7E,0EAAqE;AACrE,+BAAiC;AACjC,wEAA0F;AAE1F;IAA2C,iCAA0C;IAArF;;IA0IA,CAAC;IAtIC;;OAEG;IACO,8BAAM,GAAhB;QAEE,6CAA6C;QAC7C,IAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,kBAAkB,CAAC;QAC9E,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAE7B,EAAE,CAAC,CAAC,6BAAW,CAAC,IAAI,KAAK,iCAAe,CAAC,KAAK,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,aAAa,GAAG,IAAI,gCAAsB,EAAE,CAAC;QACpD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,aAAa,GAAG,IAAI,4BAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5D,CAAC;QAED,MAAM,CAAC,iBAAM,MAAM,WAAE,CAAC;IACxB,CAAC;IAED,sBAAc,yDAA8B;aAA5C;YACE,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;;;OAAA;IAEM,8BAAM,GAAb;QAEE,IAAI,aAAa,GAAG,IAAI,CAAC;QAEzB,iEAAiE;QACjE,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC;QAClE,IAAI,CAAC,aAAa,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAEjE,IAAM,eAAe,GAA8C,KAAK,CAAC,aAAa,CACpF,yBAAe,EACf;YACE,kBAAkB,EAAE,IAAI,CAAC,aAAa;YACtC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,aAAa;YAC5C,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,eAAe;YAChD,kBAAkB,EAAE,IAAI,CAAC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,SAAS,EAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAE,EAAE;YAChI,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ;YAClC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU;SACd,CAC3B,CAAC;QAEF,IAAM,WAAW,GAA0C,KAAK,CAAC,aAAa,CAC5E,yBAAW,EACX;YACE,QAAQ,EAAE,OAAO,CAAC,oBAAoB;YACtC,QAAQ,EAAE,OAAO,CAAC,mBAAmB;YACrC,WAAW,EAAE,OAAO,CAAC,sBAAsB;YAC3C,WAAW,EAAE,OAAO,CAAC,4BAA4B;YACjD,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;SAC3C,CACF,CAAC;QAEF,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,GAAG,eAAe,GAAG,WAAW,CAAC;QAE9E,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAElD,CAAC;IAED,sBAAc,sCAAW;aAAzB;YACE,MAAM,CAAC,yBAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;;;OAAA;IAES,oDAA4B,GAAtC;QACE,MAAM,CAAC;YACL,KAAK,EAAE;gBACL;oBACE,MAAM,EAAE;wBACN;4BACE,SAAS,EAAE,OAAO,CAAC,uBAAuB;4BAC1C,WAAW,EAAE;gCACX,uCAAqB,CAAC,eAAe,EAAE;oCACrC,KAAK,EAAE,OAAO,CAAC,6BAA6B;oCAC5C,KAAK,EAAE,EAAE;oCACT,SAAS,EAAE,IAAI;oCACf,SAAS,EAAE,IAAI;oCACf,WAAW,EAAE,OAAO,CAAC,0BAA0B;oCAC/C,iBAAiB,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC;iCACvD,CAAC;gCACF,uCAAqB,CAAC,eAAe,EAAE;oCACrC,KAAK,EAAE,OAAO,CAAC,uBAAuB;oCACtC,KAAK,EAAE,2BAA2B;oCAClC,SAAS,EAAE,IAAI;oCACf,SAAS,EAAE,IAAI;oCACf,WAAW,EAAE,OAAO,CAAC,0BAA0B;oCAC/C,iBAAiB,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC;iCACvD,CAAC;gCACF,uCAAqB,CAAC,oBAAoB,EAAE;oCAC1C,KAAK,EAAE,OAAO,CAAC,4BAA4B;oCAC3C,SAAS,EAAE,IAAI;oCACf,SAAS,EAAE,IAAI;oCACf,KAAK,EAAE,wDAAwD;iCAChE,CAAC;gCACF,uCAAqB,CAAC,UAAU,EAAE;oCAChC,KAAK,EAAE,OAAO,CAAC,kBAAkB;oCACjC,SAAS,EAAE,IAAI;oCACf,SAAS,EAAE,IAAI;oCACf,KAAK,EAAE,SAAS;iCACjB,CAAC;gCACF,oCAAkB,CAAC,iBAAiB,EAAE;oCACpC,KAAK,EAAE,OAAO,CAAC,eAAe;oCAC9B,GAAG,EAAE,EAAE;oCACP,GAAG,EAAE,CAAC;oCACN,SAAS,EAAE,IAAI;oCACf,IAAI,EAAE,CAAC;oCACP,KAAK,EAAE,EAAE;iCACV,CAAC;gCACF,oCAAkB,CAAC,YAAY,EAAE;oCAC/B,KAAK,EAAE,OAAO,CAAC,eAAe;oCAC9B,OAAO,EAAE,KAAK;iCACf,CAAC;6BACH;yBACF;qBACF;iBACF;aACF;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,qCAAa,GAArB;QACE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IACnC,CAAC;IAEO,2CAAmB,GAA3B,UAA4B,KAAa;QAEvC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC;QACxC,CAAC;QAED,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IACH,oBAAC;AAAD,CA1IA,AA0IC,CA1I0C,uCAAqB,GA0I/D","file":"webparts/search/SearchWebPart.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDom from 'react-dom';\r\nimport { Version } from '@microsoft/sp-core-library';\r\nimport {\r\n  BaseClientSideWebPart,\r\n  PropertyPaneSlider,\r\n  IPropertyPaneConfiguration,\r\n  PropertyPaneTextField,\r\n  PropertyPaneToggle\r\n} from '@microsoft/sp-webpart-base';\r\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\r\nimport * as strings from 'SearchWebPartStrings';\r\nimport SearchContainer from \"./components/SearchContainer/SearchContainer\";\r\nimport ISearchContainerProps from \"./components/SearchContainer/ISearchContainerProps\";\r\nimport { ISearchWebPartProps } from './ISearchWebPartProps';\r\nimport ISearchDataProvider from \"../dataProviders/ISearchDataProvider\";\r\nimport MockSearchDataProvider from \"../dataProviders/MockSearchDataProvider\";\r\nimport SearchDataProvider from \"../dataProviders/SearchDataProvider\";\r\nimport * as moment from \"moment\";\r\nimport { Placeholder, IPlaceholderProps } from \"@pnp/spfx-controls-react/lib/Placeholder\";\r\n\r\nexport default class SearchWebPart extends BaseClientSideWebPart<ISearchWebPartProps> {\r\n\r\n  private _dataProvider: ISearchDataProvider;\r\n\r\n  /**\r\n   * Override the base onInit() implementation to get the persisted properties to initialize data provider.\r\n   */\r\n  protected onInit(): Promise<void> {\r\n\r\n    // Init the moment JS library locale globally\r\n    const currentLocale = this.context.pageContext.cultureInfo.currentCultureName;\r\n    moment.locale(currentLocale);   \r\n\r\n    if (Environment.type === EnvironmentType.Local) {\r\n      this._dataProvider = new MockSearchDataProvider();\r\n    } else {\r\n      this._dataProvider = new SearchDataProvider(this.context);\r\n    }\r\n\r\n    return super.onInit();\r\n  }\r\n\r\n  protected get disableReactivePropertyChanges(): boolean { \r\n    return true; \r\n  }\r\n\r\n  public render(): void {\r\n                                            \r\n    let renderElement = null;\r\n\r\n    // Configure the provider before the query according to our needs\r\n    this._dataProvider.resultsCount = this.properties.maxResultsCount;\r\n    this._dataProvider.queryTemplate = this.properties.queryTemplate;\r\n\r\n    const searchContainer: React.ReactElement<ISearchContainerProps> = React.createElement(\r\n      SearchContainer,\r\n      {\r\n        searchDataProvider: this._dataProvider,\r\n        queryKeywords: this.properties.queryKeywords,\r\n        maxResultsCount: this.properties.maxResultsCount,\r\n        selectedProperties: this.properties.selectedProperties ? this.properties.selectedProperties.replace(/\\s|,+$/g,'').split(\",\") :[],\r\n        refiners: this.properties.refiners,\r\n        showPaging: this.properties.showPaging,\r\n      } as ISearchContainerProps\r\n    );\r\n\r\n    const placeholder: React.ReactElement<IPlaceholderProps> = React.createElement(\r\n      Placeholder,\r\n      {\r\n        iconName: strings.PlaceHolderEditLabel,\r\n        iconText: strings.PlaceHolderIconText,\r\n        description: strings.PlaceHolderDescription,\r\n        buttonLabel: strings.PlaceHolderConfigureBtnLabel,\r\n        onConfigure: this._setupWebPart.bind(this)\r\n      }\r\n    );\r\n\r\n    renderElement = this.properties.queryKeywords ? searchContainer : placeholder;\r\n\r\n    ReactDom.render(renderElement, this.domElement);\r\n\r\n  }\r\n\r\n  protected get dataVersion(): Version {\r\n    return Version.parse('1.0');\r\n  }\r\n\r\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\r\n    return {\r\n      pages: [\r\n        {\r\n          groups: [\r\n            {\r\n              groupName: strings.SearchSettingsGroupName,\r\n              groupFields: [\r\n                PropertyPaneTextField('queryKeywords', {\r\n                  label: strings.SearchQueryKeywordsFieldLabel,\r\n                  value: \"\",\r\n                  multiline: true,    \r\n                  resizable: true,\r\n                  placeholder: strings.SearchQueryPlaceHolderText,\r\n                  onGetErrorMessage: this._validateEmptyField.bind(this)\r\n                }),\r\n                PropertyPaneTextField('queryTemplate', {\r\n                  label: strings.QueryTemplateFieldLabel,\r\n                  value: \"{searchTerms} Path:{Site}\",\r\n                  multiline: true,    \r\n                  resizable: true,\r\n                  placeholder: strings.SearchQueryPlaceHolderText,\r\n                  onGetErrorMessage: this._validateEmptyField.bind(this)\r\n                }),\r\n                PropertyPaneTextField('selectedProperties', {\r\n                  label: strings.SelectedPropertiesFieldLabel,\r\n                  multiline: true,    \r\n                  resizable: true,\r\n                  value: \"Title,Path,Created,Filename,ServerRedirectedPreviewURL\",\r\n                }),     \r\n                PropertyPaneTextField('refiners', {\r\n                  label: strings.RefinersFieldLabel,\r\n                  multiline: true,    \r\n                  resizable: true,\r\n                  value: \"Created\"\r\n                }),             \r\n                PropertyPaneSlider(\"maxResultsCount\", {\r\n                  label: strings.MaxResultsCount,\r\n                  max: 50,\r\n                  min: 1,\r\n                  showValue: true,\r\n                  step: 1,\r\n                  value: 50,\r\n                }),            \r\n                PropertyPaneToggle(\"showPaging\", {\r\n                  label: strings.ShowPagingLabel,\r\n                  checked: false,\r\n                }),                \r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Opens the Web Part property pane\r\n   */\r\n  private _setupWebPart() {\r\n    this.context.propertyPane.open();\r\n  }\r\n\r\n  private _validateEmptyField(value: string): string {\r\n\r\n    if (!value) {\r\n      return strings.EmptyFieldErrorMessage;\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}