{"version":3,"sources":["webparts/search/components/FilterPanel/FilterPanel.tsx"],"names":[],"mappings":"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","file":"webparts/search/components/FilterPanel/FilterPanel.js","sourcesContent":["import * as React from \"react\";\r\nimport IFilterPanelProps from \"./IFilterPanelProps\";\r\nimport IFilterPanelState from \"./IFilterPanelState\";\r\nimport { PrimaryButton, DefaultButton, IButtonProps } from 'office-ui-fabric-react/lib/Button';\r\nimport { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel';\r\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { Toggle } from  'office-ui-fabric-react/lib/Toggle';\r\nimport * as strings from \"SearchWebPartStrings\";\r\nimport { IRefinementResult, IRefinementValue, IRefinementFilter } from \"../../../models/ISearchResult\";\r\nimport { Link } from 'office-ui-fabric-react/lib/Link';\r\nimport { Label } from 'office-ui-fabric-react/lib/Label';\r\nimport { Text } from \"@microsoft/sp-core-library\";\r\nimport \"../SearchWebPart.scss\";\r\nimport * as update from \"immutability-helper\";\r\nimport {\r\n    GroupedList,\r\n    IGroup,\r\n    IGroupDividerProps\r\n  } from 'office-ui-fabric-react/lib/components/GroupedList/index';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nexport default class FilterPanel extends React.Component<IFilterPanelProps, IFilterPanelState> {\r\n    \r\n    public constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showPanel: false,\r\n            selectedFilters: [],\r\n            expandedGroups: [],\r\n        };\r\n\r\n        this._onTogglePanel = this._onTogglePanel.bind(this);\r\n        this._onClosePanel = this._onClosePanel.bind(this);\r\n        this._addFilter = this._addFilter.bind(this);\r\n        this._removeFilter = this._removeFilter.bind(this);\r\n        this._isInFilterSelection = this._isInFilterSelection.bind(this);\r\n        this._applyAllfilters = this._applyAllfilters.bind(this);\r\n        this._removeAllFilters = this._removeAllFilters.bind(this);\r\n        this._onRenderHeader = this._onRenderHeader.bind(this);\r\n        this._onRenderCell = this._onRenderCell.bind(this);\r\n    }\r\n\r\n    public render(): React.ReactElement<IFilterPanelProps> {\r\n\r\n        let items: JSX.Element[] = [];\r\n        let groups: IGroup[] = [];\r\n\r\n        // Initialize the Office UI grouped list\r\n        this.props.availableFilters.map((filter, i) => {\r\n\r\n            groups.push({\r\n                key: i.toString(),\r\n                name: filter.FilterName,\r\n                count: 1,\r\n                startIndex: i,\r\n                isDropEnabled: true,\r\n                isCollapsed: this.state.expandedGroups.indexOf(i) === -1 ? true : false,\r\n            });\r\n\r\n            items.push(\r\n                <div key= { i }>\r\n                    <div className=\"filterPanel__filterProperty\">\r\n                        {\r\n                            filter.Values.map((refinementValue: IRefinementValue, j) => {\r\n\r\n                                // Create a new IRefinementFilter with only the current refinement information\r\n                                const currentRefinement: IRefinementFilter = {\r\n                                    FilterName: filter.FilterName,\r\n                                    Value: refinementValue,\r\n                                };\r\n\r\n                                return (\r\n                                    <Checkbox\r\n                                    key={ j }\r\n                                    checked= { this._isInFilterSelection(currentRefinement) }\r\n                                    disabled={ false }\r\n                                    label={ Text.format(refinementValue.RefinementValue + \" ({0})\",  refinementValue.RefinementCount)}\r\n                                    onChange= {(ev, checked: boolean) => {                                \r\n                                        // Every time we chek/uncheck a filter, a complete new search request is performed with current selected refiners\r\n                                        checked ? this._addFilter(currentRefinement): this._removeFilter(currentRefinement);\r\n                                    }} />\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        const renderSelectedFilters: JSX.Element[] = this.state.selectedFilters.map((filter) => {\r\n\r\n            return (\r\n                    <Label className=\"filter\">\r\n                        <i className=\"ms-Icon ms-Icon--ClearFilter\" onClick={ ()=> { this._removeFilter(filter); }}></i> \r\n                        { filter.Value.RefinementName  }\r\n                    </Label>      \r\n            );\r\n        });\r\n\r\n        const renderAvailableFilters =  <GroupedList\r\n                                            ref='groupedList'\r\n                                            items={ items }\r\n                                            onRenderCell={ this._onRenderCell }\r\n                                            className=\"filterPanel__body__group\"\r\n                                            groupProps={\r\n                                                {\r\n                                                    onRenderHeader: this._onRenderHeader,                                                    \r\n                                                }\r\n                                            }\r\n                                            groups={ groups }/>;\r\n\r\n        return (\r\n            <div>\r\n                <DefaultButton\r\n                    className=\"searchWp__filterResultBtn\"\r\n                    iconProps={ { iconName: 'Filter' } }\r\n                    text={ strings.FilterResultsButtonLabel }\r\n                    onClick= { this._onTogglePanel }\r\n                />            \r\n                {  (this.state.selectedFilters.length > 0) ? \r\n\r\n                        <div className=\"searchWp__selectedFilters\">\r\n                            { renderSelectedFilters } \r\n                        </div>  \r\n                    : null                    \r\n                }\r\n                <Panel\r\n                    className=\"filterPanel\"\r\n                    isOpen={ this.state.showPanel }\r\n                    type={ PanelType.smallFixedNear }\r\n                    isBlocking={ false }\r\n                    isLightDismiss= { true }\r\n                    onDismiss={ this._onClosePanel }\r\n                    headerText={ strings.FilterPanelTitle }\r\n                    closeButtonAriaLabel='Close' \r\n                    hasCloseButton={ true }\r\n                    headerClassName=\"filterPanel__header\"\r\n                                       \r\n                    onRenderBody={() => { \r\n                        if (this.props.availableFilters.length > 0) {\r\n                            return (\r\n                                <Scrollbars style={{ height: \"100%\" }}>\r\n                                    <div className=\"filterPanel__body\">\r\n                                        <div className=\"filterPanel__body__allFiltersToggle\">\r\n                                            <Toggle \r\n                                                onText={ strings.RemoveAllFiltersLabel } \r\n                                                offText={ strings.ApplyAllFiltersLabel } \r\n                                                onChanged= {(checked: boolean) => {                                \r\n                                                    checked ? this._applyAllfilters() : this._removeAllFilters();\r\n                                                }}\r\n                                                checked= { this.state.selectedFilters.length === 0 ? false : true }\r\n                                            />\r\n                                        </div>\r\n                                        { renderAvailableFilters }\r\n                                    </div>\r\n                                </Scrollbars>\r\n                            );\r\n                        } else {\r\n                            return (\r\n                                <div className=\"filterPanel__body\">\r\n                                    { strings.NoFilterConfiguredLabel }\r\n                                </div>\r\n                            );\r\n                        }\r\n                    }}>                \r\n                </Panel>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private _onRenderCell(nestingDepth: number, item: any, itemIndex: number) {\r\n        return (\r\n          <div className=\"ms-Grid-row\" data-selection-index={ itemIndex }>\r\n                <div className=\"ms-Grid-col ms-u-sm10 ms-u-md10 ms-u-lg10 ms-smPush1 ms-mdPush1 ms-lgPush1\">\r\n                    { item }\r\n                </div>            \r\n          </div>\r\n        );\r\n    }\r\n\r\n    private _onRenderHeader(props: IGroupDividerProps): JSX.Element {\r\n        return (\r\n       \r\n            <div className=\"ms-Grid-row\" onClick={ () => {\r\n\r\n                    // Update the index for expanded groups to be able to keep it open after a re-render\r\n                    const updatedExpandedGroups = \r\n                        props.group.isCollapsed ? \r\n                            update(this.state.expandedGroups, {$push: [props.group.startIndex]}) :\r\n                            update(this.state.expandedGroups, {$splice: [[this.state.expandedGroups.indexOf(props.group.startIndex), 1]]});\r\n                                    \r\n                    this.setState({ \r\n                        expandedGroups: updatedExpandedGroups,\r\n                    });\r\n\r\n                    props.onToggleCollapse(props.group); \r\n                }}>   \r\n                <div className=\"ms-Grid-col ms-u-sm1 ms-u-md1 ms-u-lg1\">\r\n                    <div className=\"header-icon\">\r\n                        <i className={ props.group.isCollapsed ? \"ms-Icon ms-Icon--ChevronDown\" : \"ms-Icon ms-Icon--ChevronUp\"}></i>\r\n                    </div>\r\n                </div>             \r\n                <div className=\"ms-Grid-col ms-u-sm10 ms-u-md10 ms-u-lg10\">\r\n                    <div className=\"ms-font-l\">{ props.group.name }</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private _onClosePanel() {\r\n        this.setState({ showPanel: false });\r\n    }\r\n    \r\n    private _onTogglePanel() {\r\n        this.setState({ showPanel: !this.state.showPanel });\r\n    }\r\n\r\n    private _addFilter(filterToAdd: IRefinementFilter): void {\r\n\r\n        // Add the filter to the selected filters collection\r\n        let newFilters = update(this.state.selectedFilters, {$push: [filterToAdd]});\r\n        this._applyFilters(newFilters);\r\n    }\r\n\r\n    private _removeFilter(filterToRemove: IRefinementFilter): void {\r\n\r\n        // Remove the filter from the selected filters collection\r\n        let newFilters = this.state.selectedFilters.filter((elt) => {\r\n            return elt.Value.RefinementToken !== filterToRemove.Value.RefinementToken;\r\n        });\r\n\r\n        this._applyFilters(newFilters);\r\n    }\r\n\r\n    private _applyAllfilters(): void {\r\n\r\n        let allFilters: IRefinementFilter[] = [];\r\n\r\n        this.props.availableFilters.map((filter) => {\r\n\r\n            filter.Values.map((refinementValue: IRefinementValue, index) => { \r\n                allFilters.push({FilterName: filter.FilterName, Value: refinementValue});\r\n            });            \r\n        });\r\n\r\n        this._applyFilters(allFilters);\r\n    }\r\n\r\n    private _removeAllFilters(): void {\r\n        this._applyFilters([]);\r\n    }\r\n\r\n    /**\r\n     * Inner method to effectivly apply the refiners by calling back the parent component\r\n     * @param selectedFilters The filters to apply\r\n     */\r\n    private _applyFilters(selectedFilters: IRefinementFilter[]): void {\r\n       \r\n        // Save the selected filters\r\n        this.setState({\r\n            selectedFilters: selectedFilters,\r\n        });\r\n\r\n        this.props.onUpdateFilters(selectedFilters);\r\n    }\r\n    \r\n    /**\r\n     * Checks if the current filter is present in the list of the selected filters\r\n     * @param filterToCheck The filter to check\r\n     */\r\n    private _isInFilterSelection(filterToCheck: IRefinementFilter): boolean {\r\n\r\n        let newFilters = this.state.selectedFilters.filter((filter) => {         \r\n            return filter.Value.RefinementToken === filterToCheck.Value.RefinementToken;            \r\n        });\r\n\r\n        return newFilters.length === 0 ? false : true;\r\n    }\r\n}"],"sourceRoot":"..\\..\\..\\..\\..\\src"}